from io import StringIO
from pathlib import Path
from os import PathLike
from typing import Dict
from configparser import ConfigParser


class KlippyHost(object):

    def setup_env(self):
        test_io = StringIO("")

        kc = KlippyConfig()
        kc.base_config_entries['test'] = {
            'a': '1',
            'b': '2'
        }
        kc.generate_config(test_io)
        print(test_io.getvalue())


class KlippyConfig(object):
    BANNER = \
        "# This configuration file was generated by Bosun\n" \
        "# Changes made here will be overwritten\n" \
        "# Printer configuration should go into files included here\n" \
        "# If you need to remove a saved config entry, you may do so below, and the changes will be automatically saved\n\n"

    SAVED_HEADER = \
        "#!# This SAVE_CONFIG block is managed by Bosun\n" \
        "#*# <---------------------- SAVE_CONFIG ---------------------->\n" \
        "#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.\n" \
        "#*#\n"

    def __init__(self):
        self.process_config = KlippyHostProcessConfig()
        self.saved_config_type = "dummy"
        self.base_config_entries: Dict[str, Dict[str, str]] = {}

    def get_saved_config(self):
        return {
            "hi there": {
                "nice to": "meet you",
                "what is": "your name"
            }
        }

    def dict_to_config_stream(self, data, out_stream) -> None:
        temp_parser = ConfigParser()
        temp_parser.read_dict(data)
        temp_parser.write(out_stream)

    def dict_to_config(self, data) -> str:
        sio = StringIO()
        self.dict_to_config_stream(data, sio)
        return sio.getvalue()

    def dict_to_saveconfig(self, data):
        saved_config = self.dict_to_config(data)
        sio = StringIO()
        sio.write(self.SAVED_HEADER)
        for i in saved_config.splitlines():
            sio.write(f"#*# {i}\n")
        return sio.getvalue()

    def generate_config(self, out_stream):
        out_stream.write(KlippyConfig.BANNER)
        self.dict_to_config_stream(self.base_config_entries, out_stream)

        saved_config = self.get_saved_config()
        if saved_config:
            out_stream.write(self.dict_to_saveconfig(saved_config))


class KlippyHostProcessConfig(object):
    """
    Represents the configuration of a klippy host
    """

    def __init__(self):
        self.config_path: Optional[PathLike] = None
        self.input_tty_path: Optional[PathLike] = None
        self.api_socket_path: Optional[PathLike] = None
        self.log_path: Optional[PathLike] = None
        self.verbose: bool = False

        self.extra_args: List[str] = []

    def validate(self):
        if not config_path:
            raise ValueError("Printer configuration path was unspecified")

    def startup_args(self):
        self.validate()
        startup_args = []

        if self.input_tty_path:
            startup_args += ['-I', input_tty_path]

        if self.api_socket_path:
            startup_args += ['-a', api_socket_path]

        if self.log_path:
            startup_args += ['-l', log_path]

        if self.verbose:
            startup_args.append('-v')

        if self.config_path:
            startup_args.append(self.config_path)

        if self.extra_args:
            startup.args += extra_args

        return startup_args
